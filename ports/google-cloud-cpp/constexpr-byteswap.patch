diff --git a/google/cloud/internal/big_endian.h b/google/cloud/internal/big_endian.h
index 927f2da..d91cf82 100644
--- a/google/cloud/internal/big_endian.h
+++ b/google/cloud/internal/big_endian.h
@@ -48,7 +48,7 @@ struct EndianTransform {
 template <>
 struct EndianTransform<false> {
   static constexpr std::int16_t byte_swap(std::int16_t value) {
-#ifdef _MSC_VER
+#if 0
     return _byteswap_ushort(value);
 #elif defined(__APPLE__)
     return OSSwapInt16(value);
@@ -56,14 +56,14 @@ struct EndianTransform<false> {
     return __builtin_bswap16(value);
 #else
     std::int16_t return_value =
-        ((((num_value)&0xff00u) >> 8) | (((num_value)&0x00ffu) << 8));
+        ((((value)&0xff00u) >> 8) | (((value)&0x00ffu) << 8));
 
     return return_value;
 #endif
   }
 
   static constexpr std::int32_t byte_swap(std::int32_t value) {
-#ifdef _MSC_VER
+#if 0
     return _byteswap_ulong(value);
 #elif defined(__APPLE__)
     return OSSwapInt32(value);
@@ -71,37 +71,37 @@ struct EndianTransform<false> {
     return __builtin_bswap32(value);
 #else
     std::int32_t return_value =
-        ((((num_value)&0xff000000ul) >> 24) |
-         (((num_value)&0x00ff0000ul) >> 8) | (((num_value)&0x0000ff00ul) << 8) |
-         (((num_value)&0x000000fful) << 24));
+        ((((value)&0xff000000ul) >> 24) |
+         (((value)&0x00ff0000ul) >> 8) | (((value)&0x0000ff00ul) << 8) |
+         (((value)&0x000000fful) << 24));
 
     return return_value;
 #endif
   }
 
   static constexpr std::int64_t byte_swap(std::int64_t value) {
-#ifdef _MSC_VER
+#if 0
     return _byteswap_uint64(value);
 #elif defined(__APPLE__)
     return OSSwapInt64(value);
 #elif defined(__GNUC__) || defined(__clang__)
     return __builtin_bswap64(value);
 #else
-    std::int64_t return_value = ((((num_value)&0xff00000000000000ull) >> 56) |
-                                 (((num_value)&0x00ff000000000000ull) >> 40) |
-                                 (((num_value)&0x0000ff0000000000ull) >> 24) |
-                                 (((num_value)&0x000000ff00000000ull) >> 8) |
-                                 (((num_value)&0x00000000ff000000ull) << 8) |
-                                 (((num_value)&0x0000000000ff0000ull) << 24) |
-                                 (((num_value)&0x000000000000ff00ull) << 40) |
-                                 (((num_value)&0x00000000000000ffull) << 56));
+    std::int64_t return_value = ((((value)&0xff00000000000000ull) >> 56) |
+                                 (((value)&0x00ff000000000000ull) >> 40) |
+                                 (((value)&0x0000ff0000000000ull) >> 24) |
+                                 (((value)&0x000000ff00000000ull) >> 8) |
+                                 (((value)&0x00000000ff000000ull) << 8) |
+                                 (((value)&0x0000000000ff0000ull) << 24) |
+                                 (((value)&0x000000000000ff00ull) << 40) |
+                                 (((value)&0x00000000000000ffull) << 56));
 
     return return_value;
 #endif
   }
 
   static constexpr std::uint16_t byte_swap(std::uint16_t value) {
-#ifdef _MSC_VER
+#if 0
     return _byteswap_ushort(value);
 #elif defined(__APPLE__)
     return OSSwapInt16(value);
@@ -109,14 +109,14 @@ struct EndianTransform<false> {
     return __builtin_bswap16(value);
 #else
     std::uint16_t return_value =
-        ((((num_value)&0xff00u) >> 8) | (((num_value)&0x00ffu) << 8));
+        ((((value)&0xff00u) >> 8) | (((value)&0x00ffu) << 8));
 
     return return_value;
 #endif
   }
 
   static constexpr std::uint32_t byte_swap(std::uint32_t value) {
-#ifdef _MSC_VER
+#if 0
     return _byteswap_ulong(value);
 #elif defined(__APPLE__)
     return OSSwapInt32(value);
@@ -124,30 +124,30 @@ struct EndianTransform<false> {
     return __builtin_bswap32(value);
 #else
     std::uint32_t return_value =
-        ((((num_value)&0xff000000ul) >> 24) |
-         (((num_value)&0x00ff0000ul) >> 8) | (((num_value)&0x0000ff00ul) << 8) |
-         (((num_value)&0x000000fful) << 24));
+        ((((value)&0xff000000ul) >> 24) |
+         (((value)&0x00ff0000ul) >> 8) | (((value)&0x0000ff00ul) << 8) |
+         (((value)&0x000000fful) << 24));
 
     return return_value;
 #endif
   }
 
   static constexpr std::uint64_t byte_swap(std::uint64_t value) {
-#ifdef _MSC_VER
+#if 0
     return _byteswap_uint64(value);
 #elif defined(__APPLE__)
     return OSSwapInt64(value);
 #elif defined(__GNUC__) || defined(__clang__)
     return __builtin_bswap64(value);
 #else
-    std::uint64_t return_value = ((((num_value)&0xff00000000000000ull) >> 56) |
-                                  (((num_value)&0x00ff000000000000ull) >> 40) |
-                                  (((num_value)&0x0000ff0000000000ull) >> 24) |
-                                  (((num_value)&0x000000ff00000000ull) >> 8) |
-                                  (((num_value)&0x00000000ff000000ull) << 8) |
-                                  (((num_value)&0x0000000000ff0000ull) << 24) |
-                                  (((num_value)&0x000000000000ff00ull) << 40) |
-                                  (((num_value)&0x00000000000000ffull) << 56));
+    std::uint64_t return_value = ((((value)&0xff00000000000000ull) >> 56) |
+                                  (((value)&0x00ff000000000000ull) >> 40) |
+                                  (((value)&0x0000ff0000000000ull) >> 24) |
+                                  (((value)&0x000000ff00000000ull) >> 8) |
+                                  (((value)&0x00000000ff000000ull) << 8) |
+                                  (((value)&0x0000000000ff0000ull) << 24) |
+                                  (((value)&0x000000000000ff00ull) << 40) |
+                                  (((value)&0x00000000000000ffull) << 56));
 
     return return_value;
 #endif
